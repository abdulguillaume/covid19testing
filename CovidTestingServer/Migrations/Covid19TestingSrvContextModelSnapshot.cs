// <auto-generated />
using System;
using Covid19TestingServer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CovidTestingServer.Migrations
{
    [DbContext(typeof(Covid19TestingSrvContext))]
    partial class Covid19TestingSrvContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Covid19TestingServer.Models.TblBiodata", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<DateTime>("Dateofbirth")
                        .HasColumnName("dateofbirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("EpidNo")
                        .HasColumnName("epid_no")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("Gender")
                        .HasColumnName("gender");

                    b.Property<string>("HomePhone")
                        .HasColumnName("home_phone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LegalGardianName")
                        .HasColumnName("Legal_gardian_name")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("LocalPhone")
                        .HasColumnName("local_phone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ResidentialAddress")
                        .IsRequired()
                        .HasColumnName("residential_address")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime>("TransferTime")
                        .HasColumnName("transfer_time")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EpidNo")
                        .IsUnique()
                        .HasName("IX_tblBiodata")
                        .HasFilter("[epid_no] IS NOT NULL");

                    b.HasIndex("Gender");

                    b.ToTable("tblBiodata");
                });

            modelBuilder.Entity("Covid19TestingServer.Models.TblLabTests", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<int>("Biodata");

                    b.Property<int>("Interpretation")
                        .HasColumnName("interpretation");

                    b.Property<int>("Method")
                        .HasColumnName("method");

                    b.Property<DateTime?>("ReportingDate")
                        .HasColumnName("reporting_date")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("ReportingTime")
                        .HasColumnName("reporting_time")
                        .HasColumnType("time(0)");

                    b.Property<DateTime?>("TestingDate")
                        .HasColumnName("testing_date")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("TestingTime")
                        .HasColumnName("testing_time")
                        .HasColumnType("time(0)");

                    b.Property<DateTime>("TransferTime")
                        .HasColumnName("transfer_time")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Biodata");

                    b.HasIndex("Method");

                    b.ToTable("tblLabTests");
                });

            modelBuilder.Entity("Covid19TestingServer.Models.TblLabTestsIndicatorsValues", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<int>("Indicator")
                        .HasColumnName("indicator");

                    b.Property<decimal?>("IndicatorValue")
                        .HasColumnName("indicator_value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Labtest")
                        .HasColumnName("labtest");

                    b.Property<int>("Method")
                        .HasColumnName("method");

                    b.HasKey("Id");

                    b.HasIndex("Labtest");

                    b.HasIndex("Indicator", "Method");

                    b.ToTable("tblLabTestsIndicatorsValues");
                });

            modelBuilder.Entity("Covid19TestingServer.Models.TblLabTestsSpecimen", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<bool>("Checked")
                        .HasColumnName("checked");

                    b.Property<int>("Labtest")
                        .HasColumnName("labtest");

                    b.Property<int>("Specimen")
                        .HasColumnName("specimen");

                    b.Property<string>("SpecimenOther")
                        .HasColumnName("specimen_other")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Specimen");

                    b.HasIndex("Labtest", "Specimen")
                        .IsUnique()
                        .HasName("IX_tblLabTestsSpecimen");

                    b.ToTable("tblLabTestsSpecimen");
                });

            modelBuilder.Entity("Covid19TestingServer.Models.TlkpGenders", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tlkpGenders");
                });

            modelBuilder.Entity("Covid19TestingServer.Models.TlkpSpecimen", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tlkpSpecimen");
                });

            modelBuilder.Entity("Covid19TestingServer.Models.TlkpTestIndicators", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("IndicatorName")
                        .IsRequired()
                        .HasColumnName("indicator_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Method")
                        .HasColumnName("method");

                    b.HasKey("Id");

                    b.HasIndex("Method");

                    b.HasIndex("Id", "Method")
                        .IsUnique()
                        .HasName("IX_tlkpTestIndicators");

                    b.ToTable("tlkpTestIndicators");
                });

            modelBuilder.Entity("Covid19TestingServer.Models.TlkpTestMethods", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Methodname")
                        .IsRequired()
                        .HasColumnName("methodname")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tlkpTestMethods");
                });

            modelBuilder.Entity("Covid19TestingServer.Models.TblBiodata", b =>
                {
                    b.HasOne("Covid19TestingServer.Models.TlkpGenders", "GenderNavigation")
                        .WithMany("TblBiodata")
                        .HasForeignKey("Gender")
                        .HasConstraintName("FK_tblBiodata_tlkpGenders");
                });

            modelBuilder.Entity("Covid19TestingServer.Models.TblLabTests", b =>
                {
                    b.HasOne("Covid19TestingServer.Models.TblBiodata", "BiodataNavigation")
                        .WithMany("TblLabTests")
                        .HasForeignKey("Biodata")
                        .HasConstraintName("FK_tblLabTests_tblBiodata");

                    b.HasOne("Covid19TestingServer.Models.TlkpTestMethods", "MethodNavigation")
                        .WithMany("TblLabTests")
                        .HasForeignKey("Method")
                        .HasConstraintName("FK_tblLabTests_tlkpTestMethods");
                });

            modelBuilder.Entity("Covid19TestingServer.Models.TblLabTestsIndicatorsValues", b =>
                {
                    b.HasOne("Covid19TestingServer.Models.TblLabTests", "LabtestNavigation")
                        .WithMany("TblLabTestsIndicatorsValues")
                        .HasForeignKey("Labtest")
                        .HasConstraintName("FK_tblLabTestsIndicatorsValues_tblLabTests");

                    b.HasOne("Covid19TestingServer.Models.TlkpTestIndicators", "TlkpTestIndicators")
                        .WithMany("TblLabTestsIndicatorsValues")
                        .HasForeignKey("Indicator", "Method")
                        .HasConstraintName("FK_tblLabTestsIndicatorsValues_tlkpTestIndicators")
                        .HasPrincipalKey("Id", "Method");
                });

            modelBuilder.Entity("Covid19TestingServer.Models.TblLabTestsSpecimen", b =>
                {
                    b.HasOne("Covid19TestingServer.Models.TblLabTests", "LabtestNavigation")
                        .WithMany("TblLabTestsSpecimen")
                        .HasForeignKey("Labtest")
                        .HasConstraintName("FK_tblLabTestsSpecimen_tblLabTests");

                    b.HasOne("Covid19TestingServer.Models.TlkpSpecimen", "SpecimenNavigation")
                        .WithMany("TblLabTestsSpecimen")
                        .HasForeignKey("Specimen")
                        .HasConstraintName("FK_tblLabTestsSpecimen_tlkpSpecimen");
                });

            modelBuilder.Entity("Covid19TestingServer.Models.TlkpTestIndicators", b =>
                {
                    b.HasOne("Covid19TestingServer.Models.TlkpTestMethods", "MethodNavigation")
                        .WithMany("TlkpTestIndicators")
                        .HasForeignKey("Method")
                        .HasConstraintName("FK_tlkpTestIndicators_tlkpTestMethods");
                });
#pragma warning restore 612, 618
        }
    }
}
